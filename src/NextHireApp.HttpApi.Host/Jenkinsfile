pipeline {
    agent any

    environment {
        EMAIL = 'dominhquan15623@example.com'
        DOTNET_CLI_TELEMETRY_OPTOUT = '1'
    }

    stages {
        stage('Restore') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet restore'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet build --no-restore -c Release'
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    dir('src') {
                        sh 'dotnet test --no-build --logger "trx;LogFileName=test_results.trx"'
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('src/**/TestResults/*.trx')) {
                            step([$class: 'MSTestPublisher', testResultsFile: 'src/**/TestResults/*.trx'])
                        }
                    }
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet format --verify-no-changes'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet publish -c Release -o staging_out'
                    }
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    sh 'echo "Running integration tests on staging environment..."'
                    // Add your integration test commands here
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    dir('src/NextHireApp.HttpApi.Host') {
                        sh 'dotnet publish -c Release -o production_out'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                emailext (
                    subject: "Jenkins Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: """
                    Pipeline execution completed.
                    
                    Job: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build Status: ${currentBuild.currentResult}
                    Build URL: ${env.BUILD_URL}
                    
                    Check Jenkins for more details.
                    """,
                    to: "${EMAIL}"
                )
            }
        }
        success {
            script {
                echo 'Pipeline completed successfully!'
            }
        }
        failure {
            script {
                echo 'Pipeline failed. Check the logs for details.'
            }
        }
    }
}
